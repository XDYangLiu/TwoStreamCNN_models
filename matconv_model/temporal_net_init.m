% input_dim: 224 * 224 *20 * batchSize
net.layers = {} ;
%%
net.layers{end+1}=struct('type', 'conv', ...
                         'filters', 0.01*randn(7,7,20,96,'single'), ...
                         'biases', zeros(1,96,'single'), ...
                         'stride', 2, ...
                         'pad', 0);
net.layers{end+1} = struct('type','relu');
net.layers{end+1} = struct('type', 'normalize', ...
                           'param', [5 1 0.0005/5 0.75]);
net.layers{end+1}=struct('type', 'pool', ...
                         'method', 'max', ...
                         'pool', [3 3], ...
                         'stride', 2, ...
                         'pad', 0);
%%
net.layers{end+1}=struct('type', 'conv', ...
                         'filters', 0.01*randn(5,5,96,256,'single'), ...
                         'biases', zeros(1,256,'single'), ...
                         'stride', 2, ...
                         'pad', 1);
net.layers{end+1} = struct('type','relu');
net.layers{end+1} = struct('type', 'normalize', ...
                           'param', [5 1 0.0005/5 0.75]);
net.layers{end+1}=struct('type', 'pool', ...
                         'method', 'max', ...
                         'pool', [3 3], ...
                         'stride', 2, ...
                         'pad', [0,1,0,1]);
%%
net.layers{end+1}=struct('type', 'conv', ...
                         'filters', 0.01*randn(3,3,256,512,'single'), ...
                         'biases', zeros(1,512,'single'), ...
                         'stride', 1, ...
                         'pad', 1);
net.layers{end+1} = struct('type','relu');
%%
net.layers{end+1}=struct('type', 'conv', ...
                         'filters', 0.01*randn(3,3,512,512,'single'), ...
                         'biases', zeros(1,512,'single'), ...
                         'stride', 1, ...
                         'pad', 1);
net.layers{end+1} = struct('type','relu');
%%
net.layers{end+1}=struct('type', 'conv', ...
                         'filters', 0.01*randn(3,3,512,512,'single'), ...
                         'biases', zeros(1,512,'single'), ...
                         'stride', 1, ...
                         'pad', 1);
net.layers{end+1} = struct('type','relu');
net.layers{end+1}=struct('type', 'pool', ...
                         'method', 'max', ...
                         'pool', [3 3], ...
                         'stride', 2, ...
                         'pad', 0);
%%
net.layers{end+1}=struct('type', 'conv', ...
                         'filters', 0.01*randn(6,6,512,4096,'single'), ...
                         'biases', zeros(1,4096,'single'), ...
                         'stride', 1, ...
                         'pad', 0);
net.layers{end+1} = struct('type', 'relu');
net.layers{end+1} = struct('type', 'dropout', ...
                           'rate', 0.9);
%%
net.layers{end+1}=struct('type', 'conv', ...
                         'filters', 0.01*randn(1,1,4096,2048,'single'), ...
                         'biases', zeros(1,2048,'single'), ...
                         'stride', 1, ...
                         'pad', 0);
net.layers{end+1} = struct('type','relu');
net.layers{end+1} = struct('type', 'dropout', ...
                           'rate', 0.8);
%%
net.layers{end+1}=struct('type', 'conv', ...
                         'filters', 0.01*randn(1,1,2048,101,'single'), ...
                         'biases', zeros(1,101,'single'), ...
                         'stride', 1, ...
                         'pad', 0);
net.layers{end+1}=struct('type', 'softmax');
net.layers{end+1} = struct('type', 'loss');

